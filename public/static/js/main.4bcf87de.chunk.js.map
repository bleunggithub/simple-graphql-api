{"version":3,"sources":["GraphQL/Mutation.js","Component/DisplayUsers.js","Component/AddUser.js","Component/UpdateUser.js","GraphQL/Queries.js","App.js","theme.js","index.js"],"names":["CREATE_USER","gql","DELETE_USER_BY_ID","UPDATE_USER_BY_ID","DisplayUsers","users","refetch","classes","useStyles","useMutation","deleteUserById","error","deleteUser","e","id","parseInt","currentTarget","value","variables","console","log","className","container","TableContainer","component","Paper","Table","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","user","scope","first_name","last_name","email","password","Button","name","onClick","makeStyles","width","margin","padding","AddUser","useState","input","setInput","handleInputChange","target","createUser","inputContainer","TextField","required","label","onChange","type","variant","preventDefault","display","justifyContent","flexWrap","marginBottom","flexGrow","UpdateUser","updateUserById","GET_USERS","App","useQuery","data","setUsers","useEffect","getAllUsers","theme","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","errorLink","onError","graphQLErrors","networkError","forEach","message","locations","path","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4bcf87de.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nexport const CREATE_USER = gql`\n    mutation createUser(\n        $first_name: String!\n        $last_name: String!\n        $email: String!\n        $password: String!\n        ){\n        createUser(\n            first_name: $first_name\n            last_name: $last_name\n            email: $email\n            password: $password\n            ){\n            id\n        }\n    }\n`\n\nexport const DELETE_USER_BY_ID = gql`\n    mutation deleteUserById(\n        $id: Int!\n    ){\n        deleteUserById(\n            id: $id\n        ){\n            id\n        }\n    }\n`\n\nexport const UPDATE_USER_BY_ID = gql`\n    mutation updateUserById(\n        $id: Int!\n        $first_name: String!\n        $last_name: String!\n        $email: String!\n        $password: String!\n        ){\n        updateUserById(\n            id: $id\n            first_name: $first_name\n            last_name: $last_name\n            email: $email\n            password: $password\n            ){\n            id\n        }\n    }\n`","import React from 'react'\n\nimport { useMutation } from '@apollo/client'\nimport { DELETE_USER_BY_ID } from '../GraphQL/Mutation'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport default function DisplayUsers({users, refetch}) {\n\n    const classes = useStyles();\n\n    const [deleteUserById, {error}] = useMutation(DELETE_USER_BY_ID)\n\n    const deleteUser = (e) => {\n        const id = parseInt(e.currentTarget.value)\n\n        deleteUserById({\n            variables: {\n                id\n            }\n        })\n\n        if (error) console.log(error)\n\n        refetch()\n    }\n    \n    return (\n        <div className={classes.container}>\n            <h1>All Users</h1>\n\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                    <TableRow>\n                        <TableCell>ID</TableCell>\n                        <TableCell align=\"right\">Name</TableCell>\n                        <TableCell align=\"right\">Email</TableCell>\n                        <TableCell align=\"right\">Password</TableCell>\n                        <TableCell align=\"right\">Delete</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {users.map(user => (\n                        <TableRow key={user.id}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {user.id}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                            {user.first_name}{' '}{user.last_name}\n                        </TableCell>\n                        <TableCell align=\"right\">{user.email}</TableCell>\n                        <TableCell align=\"right\">{user.password}</TableCell>\n                        <TableCell align=\"right\">\n                            <Button name=\"id\" value={user.id} onClick={deleteUser}>\n                                <CancelIcon />\n                            </Button>\n                        </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    table: {\n        width: '80%',\n        margin: '2em auto',\n    },\n    container: {\n        padding: '0 5% 5% 5%'\n    }\n});","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { CREATE_USER } from '../GraphQL/Mutation'\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nexport default function AddUser({refetch}) {\n    const classes = useStyles();\n\n    const [input, setInput] = useState({\n        first_name: \"\",\n        last_name: \"\",\n        email: \"\",\n        password: \"\",\n    })\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target\n        setInput({\n            ...input, [name]:value\n        })\n    }\n\n    const [createUser, {error} ] = useMutation(CREATE_USER)\n\n    const addUser = (e) => {\n        e.preventDefault();\n\n        const {first_name, last_name, email, password} = input\n\n        createUser({\n            variables: {\n                first_name,\n                last_name,\n                email,\n                password\n            }\n        })\n\n        if (error) console.log(error)\n\n        setInput({\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\",\n            password: \"\",\n        })\n        \n        refetch()\n    }\n\n    return (\n        <div className={classes.container}>\n            <h1>Add new user</h1>\n        <form>\n            <div className={classes.inputContainer}>\n                <TextField required label=\"First Name\" name=\"first_name\" value={input.first_name} onChange={handleInputChange} type=\"text\" className={classes.input} />\n                <TextField required label=\"Last Name\" name=\"last_name\" value={input.last_name} onChange={handleInputChange} type=\"text\" className={classes.input} />\n                <TextField required label=\"Email\" name=\"email\" value={input.email} onChange={handleInputChange} type=\"email\" className={classes.input} />\n                <TextField required label=\"Password\" name=\"password\" value={input.password} onChange={handleInputChange} type=\"password\" className={classes.input} />\n            </div>\n            <div className={classes.inputContainer}>\n                <Button variant=\"outlined\" onClick={addUser}>Add A New User</Button>    \n            </div>\n        </form>\n        </div>\n    )\n}\n\n\n\nconst useStyles = makeStyles({\n    container: {\n        margin:'5% 5% 0 5%'\n    },\n    inputContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        marginBottom: '3em'\n    },\n    input: {\n        flexGrow: 1,\n        margin: 10,\n    }\n});","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { UPDATE_USER_BY_ID } from '../GraphQL/Mutation'\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nexport default function UpdateUser({refetch}) {\n    const classes = useStyles();\n\n    const [input, setInput] = useState({\n        id: \"\",\n        first_name: \"\",\n        last_name: \"\",\n        email: \"\",\n        password: \"\",\n    })\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target\n        setInput({\n            ...input, [name]:value\n        })\n    }\n\n    const [updateUserById, {error} ] = useMutation(UPDATE_USER_BY_ID)\n\n    const updateUser = (e) => {\n        e.preventDefault();\n\n        const { first_name, last_name, email, password } = input\n        \n        const id = parseInt(input.id)\n\n        updateUserById({\n            variables: {\n                id,\n                first_name,\n                last_name,\n                email,\n                password\n            }\n        })\n\n        if (error) console.log(error)\n\n        setInput({\n            id: \"\",\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\",\n            password: \"\",\n        })\n        \n        refetch()\n    }\n\n    return (\n        <div className={classes.container}>\n            <h1>Update user</h1>\n        <form>\n            <div className={classes.inputContainer}>\n                <TextField required label=\"ID\" name=\"id\" value={input.id} onChange={handleInputChange} type=\"text\" className={classes.input} />\n                <TextField required label=\"First Name\" name=\"first_name\" value={input.first_name} onChange={handleInputChange} type=\"text\" className={classes.input} />\n                <TextField required label=\"Last Name\" name=\"last_name\" value={input.last_name} onChange={handleInputChange} type=\"text\" className={classes.input} />\n                <TextField required label=\"Email\" name=\"email\" value={input.email} onChange={handleInputChange} type=\"email\" className={classes.input} />\n                <TextField required label=\"Password\" name=\"password\" value={input.password} onChange={handleInputChange} type=\"password\" className={classes.input} />\n            </div>\n            <div className={classes.inputContainer}>\n                <Button variant=\"outlined\" onClick={updateUser}>Update User Details</Button>    \n            </div>\n        </form>\n        </div>\n    )\n}\n\n\n\nconst useStyles = makeStyles({\n    container: {\n        margin:'0% 5%'\n    },\n    inputContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        marginBottom: '3em'\n    },\n    input: {\n        flexGrow: 1,\n        margin: 10,\n    }\n});","import { gql } from '@apollo/client'\n\nexport const GET_USERS = gql`\n    query{\n        getAllUsers{\n            id\n            first_name\n            last_name\n            email\n            password\n        }\n    }\n`","import React, {useEffect, useState} from 'react'\nimport './App.css';\n\nimport DisplayUsers from './Component/DisplayUsers';\nimport AddUser from './Component/AddUser';\nimport UpdateUser from './Component/UpdateUser';\n\nimport { useQuery } from '@apollo/client'\nimport { GET_USERS } from './GraphQL/Queries'\n\nfunction App() {\n\n  const { data, refetch} = useQuery(GET_USERS) //error, loading\n  const [users, setUsers] = useState([])\n\n  useEffect(() => {\n    if(data) setUsers(data.getAllUsers)\n  }, [data])\n\n  return (\n    <>\n      <AddUser refetch={refetch}/>\n      <UpdateUser refetch={refetch}/>\n      <DisplayUsers users={users} refetch={refetch} />\n    </>\n  );\n}\n\nexport default App;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#8c8c82',\n    },\n    secondary: {\n      main: '#58eff4',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'fontsource-roboto';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from\n} from '@apollo/client'\nimport { onError } from \"@apollo/client/link/error\";\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\n\nconst link = from([\n  errorLink,\n  new HttpLink({\n    uri: \"/graphql\"\n  })\n])\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n    </ApolloProvider>\n  ,document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}